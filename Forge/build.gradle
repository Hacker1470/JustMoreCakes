buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}
apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

version = "${mod_v}"
group = "${mod_group}"
archivesBaseName = "${mod_name}-forge-${mc_v}"

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}Common.mixins.json"
}

minecraft {
    mappings channel: 'official', version: "${mc_v}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', "${mod_id}", '--all', '--output', file("src/generated/resources/"), '--existing', project(":Common").file("src/main/resources/")
            taskName 'Data'
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir "src/generated/resources" }

dependencies {
    compileOnly project(":Common")
    minecraft "net.minecraftforge:forge:${mc_v}-${forge_v}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    runtimeOnly fg.deobf("curse.maven:catalogue-459701:${forge_catalogue_v}")
//    runtimeOnly fg.deobf("curse.maven:configured-457570:${forge_configured_v}")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_v}-forge:${jei_v}")
//    runtimeOnly fg.deobf("me.shedaniel:RoughlyEnoughItems-forge:${rei_v}")

    implementation fg.deobf("curse.maven:cake-chomps-307943:${forge_cake_chomps_v}")
    implementation fg.deobf("me.shedaniel.cloth:cloth-config-forge:${cloth_config_v}")
    implementation fg.deobf("dev.architectury:architectury-forge:${architectury_v}")

    compileOnly(testCompileOnly(fg.deobf("mezz.jei:jei-${mc_v}-common-api:${jei_v}")))
    compileOnly(testCompileOnly(fg.deobf("mezz.jei:jei-${mc_v}-forge-api:${jei_v}")))
    compileOnly(testCompileOnly(fg.deobf("me.shedaniel:RoughlyEnoughItems-forge:${rei_v}")))
}

processResources {
    from project(":Common").sourceSets.main.resources

    exclude("jmcCommon.accesswidener")
    exclude('.cache/')

    inputs.property "version", "${mod_v}"

    filesMatching("META-INF/mods.toml") {
        expand "version": "${mod_v}"
    }
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}
