plugins {
    id 'fabric-loom' version '0.12-SNAPSHOT'
    id 'maven-publish'
    id 'idea'
}

version = "${mod_v}"
group = "${mod_group}"
archivesBaseName = "${mod_name}-fabric-${mc_v}"

repositories {
    maven {
        url = "https://maven.terraformersmc.com/releases/"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${mc_v}"
    mappings loom.officialMojangMappings()

    modImplementation "net.fabricmc:fabric-loader:${fabric_v}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_api_v}+${mc_v}"
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
    implementation project(":Common")

//    modRuntimeOnly("curse.maven:catalogue-fabric-667377:${fabric_catalogue_v}")
//    modRuntimeOnly("curse.maven:configured-fabric-667378:${fabric_configured_v}")
    modRuntimeOnly("mezz.jei:jei-${mc_v}-fabric:${jei_v}")
//    modRuntimeOnly("me.shedaniel:RoughlyEnoughItems-fabric:${rei_v}")
    modRuntimeOnly("me.shedaniel.cloth:cloth-config-fabric:${cloth_config_v}")
    modRuntimeOnly("dev.architectury:architectury-fabric:${architectury_v}")

    modImplementation("com.terraformersmc:modmenu:${modmenu_v}")
//    modImplementation("curse.maven:cake-chomps-307943:${fabric_cake_chomps_v}")
    modImplementation("fuzs.forgeconfigapiport:forgeconfigapiport-fabric:${config_port_v}")

    modCompileOnlyApi("mezz.jei:jei-${mc_v}-common-api:${jei_v}")
    modCompileOnlyApi("mezz.jei:jei-${mc_v}-fabric-api:${jei_v}")

    modCompileOnly("me.shedaniel:RoughlyEnoughItems-api-fabric:${rei_v}")
    modCompileOnly("me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:${rei_v}")
}

loom {
    accessWidenerPath = project(":Common").file("src/main/resources/jmcCommon.accesswidener")

    mixin.defaultRefmapName = "${mod_id}.refmap.json"

    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
        data {
            inherit client
            setConfigName("Fabric Data")
            ideConfigGenerated(true)
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=${mod_id}"
            runDir("build/datagen")
        }
    }
}

sourceSets.main.resources { srcDirs += ["src/main/generated"] }

processResources {
    from project(":Common").sourceSets.main.resources

    exclude('.cache/')

    inputs.property "version", "${mod_v}"

    filesMatching("fabric.mod.json") {
        expand "version": "${mod_v}"
    }
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java
        }
    }

    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}
